package oy.interact.tira.student;

import oy.interact.tira.util.StackInterface;

public class StackImplementation<E> implements StackInterface<E> {

    private Object[] itemArray = null;
    private static final int DEFAULT_STACK_SIZE = 10;
    private int capacity = DEFAULT_STACK_SIZE;
    private int currentIndex;

    public StackImplementation() {
        this(DEFAULT_STACK_SIZE);
    }

    public StackImplementation(int size) {
        itemArray = new Object[size];
        currentIndex = -1;
    }

    @Override
    public int capacity() {
        if (itemArray == null) {
            return 0;
        } else {
            return capacity;
        }
    }

    @Override
    public void push(E element) throws OutOfMemoryError, NullPointerException {
        if (element == null) {
            throw new NullPointerException();
        }
        if (currentIndex >= capacity - 1) {
            reallocate(capacity * 2);
        }
        currentIndex += 1;
        itemArray[currentIndex] = element;
    }

    @SuppressWarnings("unchecked")
    @Override
    public E pop() throws IllegalStateException {
        if (currentIndex < 0) {
            throw new IllegalStateException("Cannot pop from an empty stack");
        } else {
            E element = (E) itemArray[currentIndex];
            itemArray[currentIndex] = null;
            currentIndex--;
            return (E) element;
        }

    }

    @SuppressWarnings("unchecked")
    @Override
    public E peek() throws IllegalStateException {
        if (currentIndex < 0) {
            throw new IllegalStateException("Cannot peek from an empty stack");
        } else {
            return (E) itemArray[currentIndex];
        }
    }

    @Override
    public int size() {
        return currentIndex + 1;
    }

    @Override
    public boolean isEmpty() {
        return currentIndex == -1;
    }

    @Override
    public void clear() {
        itemArray = new Object[DEFAULT_STACK_SIZE];
        currentIndex = -1;

    }

    private void reallocate(int newCapacity) {
        Object[] newitemArray = new Object[newCapacity];

        for (int i = 0; i <= currentIndex; i++) {
            newitemArray[i] = itemArray[i];
        }
        capacity = newCapacity;
        itemArray = newitemArray;

    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        for (int i = 0; i <= currentIndex; i++) {
            sb.append(itemArray[i]);
            if (i != currentIndex) {
                sb.append(", ");
            }
        }
        sb.append("]");
        return sb.toString();
    }
}
